# -*- coding: utf-8 -*-
import re

from manager.engine import Engine
import datetime
from spider_code.api import hj_tools as eamonn
from spider_code.confs import getConfig
from spider_code.items import AutoItem

gConfig = getConfig.get_config()


class Spider(Engine):
    name = 'X--90'

    def __init__(self, *args, **kwargs):
        super(Spider, self).__init__(*args, **kwargs)
        self.start_urls = ['http://cxtx.stjs.org.cn/Estimate/OA/MainQueryMarkZZ.aspx?clearPaging=true']
        self.url = 'http://cxtx.stjs.org.cn/Estimate/OA/MainQueryMarkZZ.aspx?clearPaging=true'
        self.headers = {'Accept': '*/*',
                        'Accept-Encoding': 'gzip, deflate',
                        'Accept-Language': 'zh-CN,zh;q=0.9',
                        'Cache-Control': 'no-cache',
                        'Connection': 'keep-alive',
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'Host': 'cxtx.stjs.org.cn',
                        'Origin': 'http://cxtx.stjs.org.cn',
                        'Referer': 'http://cxtx.stjs.org.cn/Estimate/OA/MainQueryMarkZZ.aspx?clearPaging=true',
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
                        'X-MicrosoftAjax': 'Delta=true',
                        'X-Requested-With': 'XMLHttpRequest',}
        self.first_data = {
                        'ctl00$ScriptManager2': 'ctl00$UpdatePanel1|ctl00$cph_content$drpTitle',
                        '__EVENTTARGET': 'ctl00$cph_content$drpTitle',
                        '__EVENTARGUMENT': '',
                        '__LASTFOCUS': '',
                        '__VIEWSTATE': '',
                        '__VIEWSTATEENCRYPTED': '',
                        '__EVENTVALIDATION': 'X+s0qnChH2BYYFehvxpWpeYMa27LwlALrGxDBx8Jp8DNg7f6bfeD4yo0q8UWii6GUl2QRrmRUCsy45/e44Ed0nK2RmnGX8b8v1altFR435+lTTvWXL3r9HcRTkXpotPiemBaLLe78LWXof4WhhizhqFk/wb5IIWjZU2ezAUoQgk=',
                        'ctl00$WidthPixel': '',
                        'ctl00$HeightPixel': '',
                        'ctl00$cph_content$drpTitle': '0',
                        'ctl00$cph_content$txtEnterName': '',
                        'ctl00$cph_content$txtDay': datetime.datetime.now().strftime('%F'),
                        'ctl00$cph_content$GridViewPaging1$txtGridViewPagingForwardTo': '1',
                        '__ASYNCPOST': 'true',}
        self.data = {'ctl00$ScriptManager2': 'ctl00$UpdatePanel1|ctl00$cph_content$GridViewPaging1$btnForwardToPage',
                    'ctl00$WidthPixel': '',
                    'ctl00$HeightPixel': '',
                    'ctl00$cph_content$drpTitle': '0',
                    'ctl00$cph_content$txtEnterName': '',
                    'ctl00$cph_content$txtDay': datetime.datetime.now().strftime('%F'),
                    'ctl00$cph_content$GridViewPaging1$txtGridViewPagingForwardTo': '3',
                    '__EVENTTARGET': '',
                    '__EVENTARGUMENT': '',
                    '__LASTFOCUS': '',
                    '__VIEWSTATE': '',
                    '__EVENTVALIDATION': '',
                    '__VIEWSTATEENCRYPTED': '',
                    '__ASYNCPOST': 'true',
                    'ctl00$cph_content$GridViewPaging1$btnForwardToPage': 'Go',}
        self.total = 0
        self.total_count = 0
        self.page = 0

    def parse(self, response):
        self.first_data['__VIEWSTATE'] = response.xpath("//input[@name='__VIEWSTATE']/@value").extract_first("").strip()
        self.first_data['__EVENTVALIDATION'] = response.xpath("//input[@name='__EVENTVALIDATION']/@value").extract_first(
            "").strip()
        self.produce(
            url=self.url,
            data=self.first_data,
            callback=self.parse1,
            headers=self.headers
        )

    def parse1(self, response):
        page = response.meta.get('page', 1)
        if not self.total:
            self.total = eamonn.page(int(re.search(r"共<.*?>(\d+)<.*?>条数据", response.text).group(1)), 20)
        content_li = response.xpath("//table[@class='gridviewStyle']/tr")[1:]
        for i in content_li:
            item = AutoItem()
            item['企业名称'] = i.xpath("./td[3]/text()").extract_first("").strip()
            item['总排名'] = i.xpath("./td[1]/span/text()").extract_first("").strip()
            item['等级排名'] = i.xpath("./td[2]/text()").extract_first("").strip()
            item['市场行为'] = i.xpath("./td[4]/text()").extract_first("").strip()
            item['质量安全'] = i.xpath("./td[5]/text()").extract_first("").strip()
            item['其他'] = i.xpath("./td[6]/text()").extract_first("").strip()
            item['信用得分'] = i.xpath("./td[7]/span/text()").extract_first("").strip()
            item['发布日期'] = i.xpath("./td[8]/text()").extract_first("").strip()
            item['评价类别'] = i.xpath("./td[9]/text()").extract_first("").strip()
            item['评价机构'] = "汕头市施工企业诚信综合评价体系"
            item['网站维护代码'] = "x--90"
            item['省'] = "广东"
            item['市'] = "汕头"
            item['网站名称'] = "汕头市建设局（汕头市施工企业诚信综合评价体系）"
            item['url'] = self.url
            self.pipeline(item)

        if page < self.total:
            page += 1
            self.data['ctl00$cph_content$GridViewPaging1$txtGridViewPagingForwardTo'] = str(page)
            self.data['__VIEWSTATE'] = re.search(r'__VIEWSTATE\|(.*?)\|', response.text).group(1)
            self.data['__EVENTVALIDATION'] = re.search(r'__EVENTVALIDATION\|(.*?)\|', response.text).group(1)
            self.produce(
                url=self.url,
                method='post',
                data=self.data,
                headers=self.headers,
                meta={'page': page},
                callback=self.parse1
            )

    def parse_detail(self, response):
        content_li = response.xpath("//table[@class='gridviewStyle']/tr")[1:]
        for i in content_li:
            item = AutoItem()
            item['企业名称'] = i.xpath("./td[3]/text()").extract_first("").strip()
            item['总排名'] = i.xpath("./td[1]/span/text()").extract_first("").strip()
            item['等级排名'] = i.xpath("./td[2]/text()").extract_first("").strip()
            item['市场行为'] = i.xpath("./td[4]/text()").extract_first("").strip()
            item['质量安全'] = i.xpath("./td[5]/text()").extract_first("").strip()
            item['其他'] = i.xpath("./td[6]/text()").extract_first("").strip()
            item['信用得分'] = i.xpath("./td[7]/span/text()").extract_first("").strip()
            item['发布日期'] = i.xpath("./td[8]/text()").extract_first("").strip()
            item['评价类别'] = i.xpath("./td[9]/text()").extract_first("").strip()
            item['评价机构'] = "汕头市施工企业诚信综合评价体系"
            item['网站维护代码'] = "x--90"
            item['省'] = "广东"
            item['市'] = "汕头"
            item['网站名称'] = "汕头市建设局（汕头市施工企业诚信综合评价体系）"
            item['url'] = self.url
            self.pipeline(item)


if __name__ == '__main__':
    from manager.run import run

    run(['Credit', 'X--90', 'auto', 1])
